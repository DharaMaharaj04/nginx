{"ast":null,"code":"import React from'react';import{ResponsiveContainer,BarChart,Bar,Cell,XAxis,YAxis,CartesianGrid}from'recharts';import{scaleOrdinal}from'd3-scale';import{schemeCategory10}from'd3-scale-chromatic';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var colors=scaleOrdinal(schemeCategory10).range();var data=[{name:'Page A',uv:4000,female:2400,male:2400},{name:'Page B',uv:3000,female:1398,male:2210},{name:'Page C',uv:2000,female:9800,male:2290},{name:'Page D',uv:2780,female:3908,male:2000},{name:'Page E',uv:1890,female:4800,male:2181},{name:'Page F',uv:2390,female:3800,male:2500},{name:'Page G',uv:3490,female:4300,male:2100}];var getPath=function getPath(x,y,width,height){return\"M\".concat(x,\",\").concat(y+height,\"\\n          C\").concat(x+width/3,\",\").concat(y+height,\" \").concat(x+width/2,\",\").concat(y+height/3,\" \").concat(x+width/2,\", \").concat(y,\"\\n          C\").concat(x+width/2,\",\").concat(y+height/3,\" \").concat(x+2*width/3,\",\").concat(y+height,\" \").concat(x+width,\", \").concat(y+height,\"\\n          Z\");};var TriangleBar=function TriangleBar(props){var fill=props.fill,x=props.x,y=props.y,width=props.width,height=props.height;return/*#__PURE__*/_jsx(\"path\",{d:getPath(x,y,width,height),stroke:\"none\",fill:fill});};var WithCustomShape=function WithCustomShape(){return/*#__PURE__*/_jsx(ResponsiveContainer,{height:300,width:'100%',children:/*#__PURE__*/_jsxs(BarChart,{height:300,data:data,margin:{top:20},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"female\",fill:\"#8884d8\",shape:/*#__PURE__*/_jsx(TriangleBar,{}),children:data.map(function(entry,index){return/*#__PURE__*/_jsx(Cell,{fill:colors[index%20]},\"cell-\".concat(index));})})]})});};export default WithCustomShape;","map":{"version":3,"sources":["D:/nginx/frontend/src/pages/charts/recharts/charts/CustomShapeBarChart.tsx"],"names":["React","ResponsiveContainer","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","scaleOrdinal","schemeCategory10","colors","range","data","name","uv","female","male","getPath","x","y","width","height","TriangleBar","props","fill","WithCustomShape","top","map","entry","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { ResponsiveContainer, BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid } from 'recharts';\r\n\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\n\r\nconst colors = scaleOrdinal(schemeCategory10).range();\r\n\r\nconst data = [\r\n  {\r\n    name: 'Page A',\r\n    uv: 4000,\r\n    female: 2400,\r\n    male: 2400\r\n  },\r\n  {\r\n    name: 'Page B',\r\n    uv: 3000,\r\n    female: 1398,\r\n    male: 2210\r\n  },\r\n  {\r\n    name: 'Page C',\r\n    uv: 2000,\r\n    female: 9800,\r\n    male: 2290\r\n  },\r\n  {\r\n    name: 'Page D',\r\n    uv: 2780,\r\n    female: 3908,\r\n    male: 2000\r\n  },\r\n  {\r\n    name: 'Page E',\r\n    uv: 1890,\r\n    female: 4800,\r\n    male: 2181\r\n  },\r\n  {\r\n    name: 'Page F',\r\n    uv: 2390,\r\n    female: 3800,\r\n    male: 2500\r\n  },\r\n  {\r\n    name: 'Page G',\r\n    uv: 3490,\r\n    female: 4300,\r\n    male: 2100\r\n  }\r\n];\r\n\r\nconst getPath = (x, y, width, height) => `M${x},${y + height}\r\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\r\n          C${x + width / 2},${y + height / 3} ${x + (2 * width) / 3},${y + height} ${x + width}, ${\r\n  y + height\r\n}\r\n          Z`;\r\n\r\nconst TriangleBar = (props) => {\r\n  const { fill, x, y, width, height } = props;\r\n\r\n  return <path d={getPath(x, y, width, height)} stroke='none' fill={fill} />;\r\n};\r\n\r\nconst WithCustomShape = () => {\r\n  return (\r\n    <ResponsiveContainer height={300} width={'100%'}>\r\n      <BarChart\r\n        height={300}\r\n        data={data}\r\n        margin={{\r\n          top: 20\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray='3 3' />\r\n        <XAxis dataKey='name' />\r\n        <YAxis />\r\n        <Bar dataKey='female' fill='#8884d8' shape={<TriangleBar />}>\r\n          {data.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={colors[index % 20] as any} />\r\n          ))}\r\n        </Bar>\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default WithCustomShape;\r\n"]},"metadata":{},"sourceType":"module"}